library(latex2exp)
library(see)
library(ggthemes)
sessionInfo()
options(mc.cores = parallel::detectCores())
n_iter <- 10000
# make empty lists to store things in
my_models <- list()
m_samples <- list()
comp_summary <- list()
subgroup_comp <- list()
fl <- "rms_Occ_Odd.csv"
# set column types
my_cols <- cols(
.default = col_double(),
Row = col_character()
)
#import
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) %>%
glimpse() -> d_eeg
d_eeg %>% ggplot(aes(x = rms)) +
geom_histogram(binwidth = 0.2) +
theme_lucid()
fl <- "thresholds"
my_cols_threshold <- cols(
person = col_character(),
group = col_character(),
staircase = col_double(),
threshold = col_double(),
log_threshold = col_double()
)
read_csv("../Experiment/analysis/thresholds.csv", col_types = my_cols_threshold) %>%
select(subject = "person", wallpaper_group = "group", threshold) %>%
glimpse() -> d_dispthresh
rm(my_cols_threshold)
d_dispthresh %>% ggplot(aes(x = threshold)) +
geom_histogram(binwidth = 0.2) +
theme_lucid()
fl <- "rms_Occ_Even.csv"
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) -> d_eeg_occ_even
fl <- "rms_Par_Odd.csv"
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) -> d_eeg_par_odd
rm(my_cols, fl)
## define some priors
prior <- c(
set_prior("normal(0,2)", class = "b"),
set_prior("cauchy(0,2)", class = "sigma"))
m_prior <- brm(data = d_eeg,
rms ~ wallpaper_group-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter ,
sample_prior = 'only')
get_model_samples <- function(my_model) {
my_samples <- posterior_samples(my_model)
names(my_samples)  %>%
gsub('[b_]*wallpaper_group', "", .) -> names(my_samples)
return(m_samples)
}
get_model_predictions <- function(my_samples) {
my_samples %>%
as_tibble() %>%
mutate_all(exp) %>%
select(P2, PM, PG, CM, PMM, PMG, PGG, CMM, P4, P4M, P4G, P3, P3M1, P31M, P6, P6M) %>%
gather() -> my_models_predictions
return(my_model_predictions)
}
plot_model_output <- function(mdat, edat, my_title, my_colour, x_label) {
x_var <- names(edat)[3]
# plot model fit (mdat) against empiricaly data (edat)
ggplot(mdat, aes(x = value, y = key)) +
stat_pointintervalh(.width = c(.66, .95), colour = my_colour) +
geom_density_ridges(data = edat,aes_string(x = x_var, "wallpaper_group"),
fill = "grey",
alpha = 0.25,
scale = 2,
bandwidth = 0.05) +
scale_x_log10(x_label) +
ggtitle(my_title) +
theme_lucid()
}
knitr::opts_chunk$set(echo = TRUE, message=FALSE)
library(tidyverse)
library(brms)
library(tidybayes)
library(ggridges)
library(latex2exp)
library(see)
library(ggthemes)
sessionInfo()
options(mc.cores = parallel::detectCores())
n_iter <- 10000
# make empty lists to store things in
my_models <- list()
m_samples <- list()
comp_summary <- list()
subgroup_comp <- list()
fl <- "rms_Occ_Odd.csv"
# set column types
my_cols <- cols(
.default = col_double(),
Row = col_character()
)
#import
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) %>%
glimpse() -> d_eeg
d_eeg %>% ggplot(aes(x = rms)) +
geom_histogram(binwidth = 0.2) +
theme_lucid()
fl <- "thresholds"
my_cols_threshold <- cols(
person = col_character(),
group = col_character(),
staircase = col_double(),
threshold = col_double(),
log_threshold = col_double()
)
read_csv("../Experiment/analysis/thresholds.csv", col_types = my_cols_threshold) %>%
select(subject = "person", wallpaper_group = "group", threshold) %>%
glimpse() -> d_dispthresh
rm(my_cols_threshold)
d_dispthresh %>% ggplot(aes(x = threshold)) +
geom_histogram(binwidth = 0.2) +
theme_lucid()
fl <- "rms_Occ_Even.csv"
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) -> d_eeg_occ_even
fl <- "rms_Par_Odd.csv"
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) -> d_eeg_par_odd
rm(my_cols, fl)
## define some priors
prior <- c(
set_prior("normal(0,2)", class = "b"),
set_prior("cauchy(0,2)", class = "sigma"))
m_prior <- brm(data = d_eeg,
rms ~ wallpaper_group-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter ,
sample_prior = 'only')
get_model_samples <- function(my_model) {
my_samples <- posterior_samples(my_model)
names(my_samples)  %>%
gsub('[b_]*wallpaper_group', "", .) -> names(my_samples)
return(m_samples)
}
get_model_predictions <- function(my_samples) {
my_samples %>%
as_tibble() %>%
mutate_all(exp) %>%
select(P2, PM, PG, CM, PMM, PMG, PGG, CMM, P4, P4M, P4G, P3, P3M1, P31M, P6, P6M) %>%
gather() -> my_model_predictions
return(my_model_predictions)
}
plot_model_output <- function(mdat, edat, my_title, my_colour, x_label) {
x_var <- names(edat)[3]
# plot model fit (mdat) against empiricaly data (edat)
ggplot(mdat, aes(x = value, y = key)) +
stat_pointintervalh(.width = c(.66, .95), colour = my_colour) +
geom_density_ridges(data = edat,aes_string(x = x_var, "wallpaper_group"),
fill = "grey",
alpha = 0.25,
scale = 2,
bandwidth = 0.05) +
scale_x_log10(x_label) +
ggtitle(my_title) +
theme_lucid()
}
# Function doesnt' work here... beats me?
prior_samples <- get_model_samples(m_prior) %>% glimpse()
# Extract samples from model
my_samples <- posterior_samples(m_prior)
names(my_samples)  %>%
gsub('[b_]*wallpaper_group', "", .) -> names(my_samples)
prior_samples <- my_samples
# Tidy up a little
prior_predictions <- get_model_predictions(prior_samples)%>% glimpse()
# # And now plot
plot_model_output(prior_predictions, d_dispthresh,
"Prior Predictive Check: EEG RMS", "deepskyblue3", "rms")
# Function doesnt' work here... beats me?
prior_samples <- get_model_samples(m_prior) %>% glimpse()
#
# # Extract samples from model
# my_samples <- posterior_samples(m_prior)
#
# names(my_samples)  %>%
#     gsub('[b_]*wallpaper_group', "", .) -> names(my_samples)
#
# prior_samples <- my_samples
# Tidy up a little
prior_predictions <- get_model_predictions(prior_samples)%>% glimpse()
knitr::opts_chunk$set(echo = TRUE, message=FALSE)
library(tidyverse)
library(brms)
library(tidybayes)
library(ggridges)
library(latex2exp)
library(see)
library(ggthemes)
sessionInfo()
options(mc.cores = parallel::detectCores())
n_iter <- 10000
# make empty lists to store things in
my_models <- list()
m_samples <- list()
comp_summary <- list()
subgroup_comp <- list()
fl <- "rms_Occ_Odd.csv"
# set column types
my_cols <- cols(
.default = col_double(),
Row = col_character()
)
#import
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) %>%
glimpse() -> d_eeg
d_eeg %>% ggplot(aes(x = rms)) +
geom_histogram(binwidth = 0.2) +
theme_lucid()
fl <- "thresholds"
my_cols_threshold <- cols(
person = col_character(),
group = col_character(),
staircase = col_double(),
threshold = col_double(),
log_threshold = col_double()
)
read_csv("../Experiment/analysis/thresholds.csv", col_types = my_cols_threshold) %>%
select(subject = "person", wallpaper_group = "group", threshold) %>%
glimpse() -> d_dispthresh
rm(my_cols_threshold)
d_dispthresh %>% ggplot(aes(x = threshold)) +
geom_histogram(binwidth = 0.2) +
theme_lucid()
fl <- "rms_Occ_Even.csv"
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) -> d_eeg_occ_even
fl <- "rms_Par_Odd.csv"
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) -> d_eeg_par_odd
rm(my_cols, fl)
## define some priors
prior <- c(
set_prior("normal(0,2)", class = "b"),
set_prior("cauchy(0,2)", class = "sigma"))
m_prior <- brm(data = d_eeg,
rms ~ wallpaper_group-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter ,
sample_prior = 'only')
get_model_samples <- function(my_model) {
my_samples <- posterior_samples(my_model)
names(my_samples)  %>%
gsub('[b_]*wallpaper_group', "", .) -> names(my_samples)
return(my_samples)
}
get_model_predictions <- function(my_samples) {
my_samples %>%
as_tibble() %>%
mutate_all(exp) %>%
select(P2, PM, PG, CM, PMM, PMG, PGG, CMM, P4, P4M, P4G, P3, P3M1, P31M, P6, P6M) %>%
gather() -> my_model_predictions
return(my_model_predictions)
}
plot_model_output <- function(mdat, edat, my_title, my_colour, x_label) {
x_var <- names(edat)[3]
# plot model fit (mdat) against empiricaly data (edat)
ggplot(mdat, aes(x = value, y = key)) +
stat_pointintervalh(.width = c(.66, .95), colour = my_colour) +
geom_density_ridges(data = edat,aes_string(x = x_var, "wallpaper_group"),
fill = "grey",
alpha = 0.25,
scale = 2,
bandwidth = 0.05) +
scale_x_log10(x_label) +
ggtitle(my_title) +
theme_lucid()
}
prior_samples <- get_model_samples(m_prior) %>% glimpse()
# Tidy up a little
prior_predictions <- get_model_predictions(prior_samples)%>% glimpse()
# # And now plot
plot_model_output(prior_predictions, d_eeg,
"Prior Predictive Check: EEG RMS", "deepskyblue3", "rms")
m_prior <- brm(data = d_dispthresh,
threshold ~ wallpaper_group-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter ,
sample_prior = 'only')
# Extract samples from model
prior_samples <- get_model_samples(m_prior)
# Tidy up a little
prior_predictions <- get_model_predictions(prior_samples)
plot_model_output(prior_predictions, d_dispthresh,
"Prior Predictive Check: Display Duration Thresholds", "deepskyblue3", "display threshold (ms)")
m_eeg <- brm(data = d_eeg,
rms ~ wallpaper_group-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter,
control = list(adapt_delta = 0.99))
summary(m_eeg)
# Extract samples from model
my_samples$eeg <- get_model_samples(m_eeg)
# Tidy up a little
my_models$eeg <- get_model_predictions(my_samples$eeg)
# Plot
plot_model_output(my_models$eeg, d_eeg,
"Model Fits: EEG RMS", "orangered3", "rms")
m_threshold <- brm(data = d_dispthresh,
threshold ~ wallpaper_group-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter,
control = list(adapt_delta = 0.99))
knitr::opts_chunk$set(echo = TRUE, message=FALSE)
# specify some colours to use in the plots
v_cols <- ggthemes::ptol_pal()(6)
library(tidyverse)
library(brms)
library(tidybayes)
library(ggridges)
library(latex2exp)
library(see)
library(ggthemes)
sessionInfo()
options(mc.cores = parallel::detectCores())
n_iter <- 10000
# make empty lists to store things in
my_models <- list()
my_samples <- list()
comp_summary <- list()
subgroup_comp <- list()
fl <- "rms_Occ_Odd.csv"
# set column types
my_cols <- cols(
.default = col_double(),
Row = col_character()
)
#import
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) %>%
glimpse() -> d_eeg
d_eeg %>% ggplot(aes(x = rms)) +
geom_histogram(binwidth = 0.2) +
theme_lucid()
knitr::opts_chunk$set(echo = TRUE, message=FALSE)
# specify some colours to use in the plots
v_cols <- ggthemes::ptol_pal()(6)
library(tidyverse)
library(brms)
library(tidybayes)
library(ggridges)
library(latex2exp)
library(see)
library(ggthemes)
sessionInfo()
options(mc.cores = parallel::detectCores())
n_iter <- 10000
# make empty lists to store things in
my_models <- list()
my_samples <- list()
comp_summary <- list()
subgroup_comp <- list()
fl <- "rms_Occ_Odd.csv"
# set column types
my_cols <- cols(
.default = col_double(),
Row = col_character()
)
#import
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) %>%
glimpse() -> d_eeg
d_eeg %>% ggplot(aes(x = rms)) +
geom_histogram(binwidth = 0.2, colour = "skyblue", colour = black) +
theme_lucid()
d_eeg %>% ggplot(aes(x = rms)) +
geom_histogram(binwidth = 0.2, colour = "skyblue", colour = "black") +
theme_lucid()
d_eeg %>% ggplot(aes(x = rms)) +
geom_histogram(binwidth = 0.2, fill = "skyblue", colour = "black") +
theme_lucid()
fl <- "thresholds"
my_cols_threshold <- cols(
person = col_character(),
group = col_character(),
staircase = col_double(),
threshold = col_double(),
log_threshold = col_double()
)
read_csv("../Experiment/analysis/thresholds.csv", col_types = my_cols_threshold) %>%
select(subject = "person", wallpaper_group = "group", threshold) %>%
glimpse() -> d_dispthresh
rm(my_cols_threshold)
d_dispthresh %>% ggplot(aes(x = threshold)) +
geom_histogram(binwidth = 0.2) +
theme_lucid()
d_dispthresh %>% ggplot(aes(x = threshold)) +
geom_histogram(binwidth = 0.2) +
theme_lucid(fill = "skyblue", colour = "black")
d_dispthresh %>% ggplot(aes(x = threshold)) +
geom_histogram(binwidth = 0.2) +
theme_lucid(fill = "skyblue", colour = "black")
d_dispthresh %>% ggplot(aes(x = threshold)) +
geom_histogram(binwidth = 0.2, fill = "skyblue", colour = "black") +
theme_lucid()
fl <- "rms_Occ_Even.csv"
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) -> d_eeg_occ_even
fl <- "rms_Par_Odd.csv"
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wallpaper_group = "Row") %>%
gather("subject", "rms", -wallpaper_group) -> d_eeg_par_odd
rm(my_cols, fl)
## define some priors
prior <- c(
set_prior("normal(0,2)", class = "b"),
set_prior("cauchy(0,2)", class = "sigma"))
m_prior <- brm(data = d_eeg,
rms ~ wallpaper_group-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter ,
sample_prior = 'only')
get_model_samples <- function(my_model) {
my_samples <- posterior_samples(my_model)
names(my_samples)  %>%
gsub('[b_]*wallpaper_group', "", .) -> names(my_samples)
return(my_samples)
}
get_model_predictions <- function(my_samples) {
my_samples %>%
as_tibble() %>%
mutate_all(exp) %>%
select(P2, PM, PG, CM, PMM, PMG, PGG, CMM, P4, P4M, P4G, P3, P3M1, P31M, P6, P6M) %>%
gather() -> my_model_predictions
return(my_model_predictions)
}
plot_model_output <- function(mdat, edat, my_title, my_colour, x_label) {
x_var <- names(edat)[3]
# plot model fit (mdat) against empiricaly data (edat)
ggplot(mdat, aes(x = value, y = key)) +
stat_pointintervalh(.width = c(.66, .95), colour = my_colour) +
geom_density_ridges(data = edat,aes_string(x = x_var, "wallpaper_group"),
fill = "grey",
alpha = 0.25,
scale = 2,
bandwidth = 0.05) +
scale_x_log10(x_label) +
ggtitle(my_title) +
theme_lucid()
}
get_model_samples <- function(my_model) {
my_samples <- posterior_samples(my_model)
names(my_samples)  %>%
gsub('[b_]*wallpaper_group', "", .) -> names(my_samples)
return(my_samples)
}
get_model_predictions <- function(my_samples) {
my_samples %>%
as_tibble() %>%
mutate_all(exp) %>%
select(P2, PM, PG, CM, PMM, PMG, PGG, CMM, P4, P4M, P4G, P3, P3M1, P31M, P6, P6M) %>%
gather() -> my_model_predictions
return(my_model_predictions)
}
plot_model_output <- function(mdat, edat, my_title, my_colour, x_label) {
x_var <- names(edat)[3]
# plot model fit (mdat) against empiricaly data (edat)
ggplot(mdat, aes(x = value, y = key)) +
stat_pointintervalh(.width = c(.66, .95), colour = my_colour) +
geom_density_ridges(data = edat,aes_string(x = x_var, "wallpaper_group"),
fill = "grey",
alpha = 0.25,
scale = 2,
bandwidth = 0.05) +
scale_x_log10(x_label) +
ggtitle(my_title) +
theme_lucid()
}
prior_samples <- get_model_samples(m_prior) %>% glimpse()
# Tidy up a little
prior_predictions <- get_model_predictions(prior_samples)%>% glimpse()
# # And now plot
plot_model_output(prior_predictions, d_eeg,
"Prior Predictive Check: EEG RMS", "deepskyblue3", "rms")
m_prior <- brm(data = d_dispthresh,
threshold ~ wallpaper_group-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter ,
sample_prior = 'only')
# Extract samples from model
prior_samples <- get_model_samples(m_prior)
# Tidy up a little
prior_predictions <- get_model_predictions(prior_samples)
plot_model_output(prior_predictions, d_dispthresh,
"Prior Predictive Check: Display Duration Thresholds", "deepskyblue3", "display threshold (ms)")
