tibble(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])
subgroups$subgroup[ii]]
subgroups$subgroup[ii]
my_samples[subgroups$subgroup[ii]]
my_samples
my_samples <- readRDS("my_samples.rda")
my_samples <- my_samples$eeg
my_samples
my_samples[subgroups$subgroup[ii]]
tibble(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])
subgroups$label
subgroups$label[ii]
subgroups$label[ii]
subgroup_comp %>% add_row(subgroups$label[ii] = tibble(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
subgroup_comp %>% add_row(subgroups$label[ii] := tibble(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
subgroup_comp %>% add_row(!!subgroups$label[ii] := tibble(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
subgroup_comp %>% add_row(tibble(!!subgroups$label[ii] := my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
tibble(!!subgroups$label[ii] := my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])
ii
!!subgroups$label[ii]
tibble(subgroups$label[ii] := my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])
tibble(!!subgroups$label[ii] := my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])
subgroup_comp <- tibble()
for (ii in 1:nrow(subgroups)) {
subgroup_comp %>% add_row(
tibble(
!!subgroups$label[ii] := my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
}
}
subgroup_comp <- tibble(label, difference)
for (ii in 1:nrow(subgroups)) {
subgroup_comp %>% add_row(
tibble(
label = subgroups$label[ii],
difference = my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
}
}
subgroup_comp <- tibble(label, difference)
subgroup_comp <- tibble(label = as.character(), difference = as.numeric())
for (ii in 1:nrow(subgroups)) {
subgroup_comp %>% add_row(
tibble(
label = subgroups$label[ii],
difference = my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
}
}
tibble(
label = subgroups$label[ii],
difference = my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])
subgroups$label[ii]
my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]
head(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])
head(as.numeric(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
head(unlist(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
subgroups$subgroup[ii]
my_samples[subgroups$subgroup[ii]]
head(my_samples[subgroups$subgroup[ii]])
tibble(
label = subgroups$label[ii],
difference = my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])
subgroup_comp %>% add_row(
tibble(
label = subgroups$label[ii],
difference = my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]
head(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])
head(as.numeric(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
head(unlist(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
(unlist(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))
str(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])
(my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[1]
head((my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[1])
head((my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]])
((my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]])
tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))[[1]])
tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]]))[[1]]
tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]])
subgroup_comp <- tibble(label = as.character(), difference = as.numeric())
for (ii in 1:nrow(subgroups)) {
subgroup_comp %>% add_row(
tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]]))
}
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]])
subgroup_comp <- tibble(label = as.character(), difference = as.numeric())
subgroup_comp
tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]])
subgroup_comp %>% add_row(
tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]]))
names(subgroup_comp)
names(tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]]))
subgroup_comp %>% add_row(
tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]]))
subgroup_comp <- tibble(label = as.character(), difference = as.numeric())
subgroup_comp
add_row(
subgroup_comp,
tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]]))
library(tidyverse)
add_row(
subgroup_comp,
tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]]))
names(tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]]))
names(subgroup_comp)
subgroup_comp
rlang::last_error()
subgroup_comp <- bind_rows(
subgroup_comp,
tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]]))
subgroup_comp <- tibble(label = as.character(), difference = as.numeric())
for (ii in 1:nrow(subgroups)) {
subgroup_comp <- bind_rows(
subgroup_comp,
tibble(
label = subgroups$label[ii],
difference = (my_samples[subgroups$subgroup[ii]] - my_samples[subgroups$group[ii]])[[1]]))
}
subgroup_comp
subgroups
get_subgroup_comparisons(m_samples, n_iter)
source("scripts/get_subgroup_comparisons.R")
get_subgroup_comparisons(m_samples, n_iter)
m_samples
get_subgroup_comparisons(my_samples, n_iter)
get_subgroup_comparisons(my_samples, )
n_iter <- 10000
get_subgroup_comparisons(my_samples, n_iter)
my_samples
subgroup_comp$eeg <- get_subgroup_comparisons2(my_samples$eeg, 2*n_iter)
subgroup_comp$eeg <- get_subgroup_comparisons2(my_samples$eeg, 2*n_iter)
source("scripts/get_subgroup_comparisons.R")
subgroup_comp$eeg <- get_subgroup_comparisons2(my_samples$eeg, 2*n_iter)
comparison_summary <- function(subgroup_comp_dat, greater, measurement_lab) {
# compute probabilties
subgroup_comp_dat %>%
group_by(key, index, normal) %>%
summarise(
mean_value = mean(value),
prob_one_tailed = if_else(greater == TRUE, mean(value > 0), mean(value < 0)))  %>%
mutate(
measurement = measurement_lab,
index_labs = as.numeric(as.factor(index)),
lab_cols = v_cols[index_labs],
prob_cat = cut(prob_one_tailed, c(0, 0.5, 0.75, 0.9, 0.99, 1))) -> comp_summary_dat
return(comp_summary_dat)
}
# compute probabilties
comp_summary$eeg <- comparison_summary(subgroup_comp$eeg, TRUE, 'rms')
subgroup_comp
source("scripts/get_subgroup_comparisons.R")
subgroup_comp$eeg <- get_subgroup_comparisons2(my_samples$eeg)
subgroup_comp$threshold <- get_subgroup_comparisons2(my_samples$threshold,)
subgroup_comp$occ_even <- get_subgroup_comparisons2(my_samples$occ_even)
subgroup_comp$par_odd  <- get_subgroup_comparisons2(my_samples$par_odd)
comparison_summary <- function(subgroup_comp_dat, greater, measurement_lab) {
# compute probabilties
subgroup_comp_dat %>%
group_by(key, index, normal) %>%
summarise(
mean_value = mean(value),
prob_one_tailed = if_else(greater == TRUE, mean(value > 0), mean(value < 0)))  %>%
mutate(
measurement = measurement_lab,
index_labs = as.numeric(as.factor(index)),
lab_cols = v_cols[index_labs],
prob_cat = cut(prob_one_tailed, c(0, 0.5, 0.75, 0.9, 0.99, 1))) -> comp_summary_dat
return(comp_summary_dat)
}
# compute probabilties
comp_summary$eeg <- comparison_summary(subgroup_comp$eeg, TRUE, 'rms')
comp_summary$eeg <- comparison_summary(subgroup_comp$eeg, TRUE, 'rms')
library(bookdown)
library(tidyverse)
library(brms)
library(tidybayes)
library(ggridges)
library(latex2exp)
library(see)
library(ggthemes)
library(patchwork)
library(magick)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, fig.align='center')
# specify some colours to use in the plots
v_cols <- ggthemes::ptol_pal()(6)
# read in some helper functions that will be used later
source("scripts/helper_functions.R")
sessionInfo()
# Use multiple cores and set number of iterations.
options(mc.cores = parallel::detectCores())
n_iter <- 10000
# make empty lists to store things in
my_models <- list()
my_samples <- list()
comp_summary <- list()
subgroup_comp <- list()
plt <- cowplot::ggdraw() +
cowplot::draw_image("../figures/occTopo_merged.png")
print(plt)
fl <- "rms_Occ_Odd.csv"
# set column types
my_cols <- cols(
.default = col_double(),
Row = col_character()
)
#import
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wg = "Row") %>%
gather("subject", "rms", -wg) %>%
glimpse() -> d_eeg
d_eeg %>% ggplot(aes(x = rms)) +
geom_histogram(binwidth = 0.2, fill = "skyblue", colour = "black") +
theme_lucid()
fl <- "thresholds"
my_cols_threshold <- cols(
person = col_character(),
group = col_character(),
staircase = col_double(),
threshold = col_double(),
log_threshold = col_double()
)
read_csv("../Experiment/process_results/thresholds.csv", col_types = my_cols_threshold) %>%
select(subject = "person", wg = "group", threshold) %>%
glimpse() -> d_dispthresh
rm(my_cols_threshold)
d_dispthresh %>% ggplot(aes(x = threshold)) +
geom_histogram(binwidth = 0.2, fill = "skyblue", colour = "black") +
theme_lucid()
fl <- "rms_Occ_Even.csv"
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wg = "Row") %>%
gather("subject", "rms", -wg) -> d_eeg_occ_even
fl <- "rms_Par_Odd.csv"
read_csv(paste("data/", fl, sep = ""), col_types = my_cols) %>%
rename(wg = "Row") %>%
gather("subject", "rms", -wg) -> d_eeg_par_odd
rm(my_cols, fl)
source("scripts/import_subgroup_comparisons.R")
glimpse(subgroups)
opts <- options(knitr.kable.NA = "")
knitr::kable(index_table, caption = "subgroup index")
knitr::kable(normal_table, caption = "normal and non-normal subgroups")
prior <- c(
set_prior("normal(0,2)", class = "b"),
set_prior("cauchy(0,2)", class = "sigma"))
m_prior <- brm(data = d_eeg,
rms ~ wg-1 + (1|subject),
family = "lognormal",
prior = prior,
iter = n_iter ,
sample_prior = 'only')
prior_samples <- get_model_samples(m_prior)
# Tidy up a little
prior_predictions <- get_model_predictions(prior_samples)%>% glimpse()
# # And now plot
p1 <- plot_model_output(prior_predictions, d_eeg,
"odd-harmonic data from \noccipital electrodes", "cornflowerblue", "log(rms)")
p2 <- plot_model_output(prior_predictions, d_dispthresh,
"display duration threshold data", "cornflowerblue", "log(ms)")
# draw pot
plt <- p1 + p2
plt + plot_annotation(title = 'Prior Predictive Checks')
m_eeg <- brm(data = d_eeg,
rms ~ wg-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter,
control = list(adapt_delta = 0.99))
summary(m_eeg)
# Also fit to display duration data so I can display both models together
m_threshold <- brm(data = d_dispthresh,
threshold ~ wg-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter,
control = list(adapt_delta = 0.99))
# Extract samples from model
my_samples$eeg <- get_model_samples(m_eeg)
my_samples$threshold <- get_model_samples(m_threshold)
# Tidy up a little
my_models$eeg <- get_model_predictions(my_samples$eeg)
my_models$threshold <- get_model_predictions(my_samples$threshold)
# Plot
plt1 <- plot_model_output(
my_models$eeg, d_eeg,
"odd-harmonic data from \noccipital electrodes",
"orangered3",
"log(rms)")
plt2 <- plot_model_output(
my_models$threshold, d_dispthresh,
"Psychophysical Data",
"orangered3",
"threshold (ms)")
plt1 + plt2 + plot_annotation(title = 'Model Fits:')
summary(m_threshold)
m_eeg_par_odd <- brm(data = d_eeg_par_odd,
rms ~ wg-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter,
control = list(adapt_delta = 0.99))
my_samples$par_odd <- get_model_samples(m_eeg_par_odd)
my_models$par_odd <- get_model_predictions(my_samples$par_odd)
plt1 <- plot_model_output(my_models$par_odd, d_eeg_par_odd,
"odd-harmonic data from \nparietal electrodes", "orangered3", "threshold (ms)")
m_eeg_occ_even <- brm(data = d_eeg_occ_even,
rms ~ wg-1 + (1|subject),
family = "lognormal",
prior = prior, iter = n_iter,
control = list(adapt_delta = 0.99))
# Extract samples from model
my_samples$occ_even <- get_model_samples(m_eeg_occ_even)
my_models$occ_even <- get_model_predictions(my_samples$occ_even)
plt2 <- plot_model_output(my_models$occ_even, d_eeg_occ_even,
"even-harmonic data from \noccipital electrodes", "orangered3", "threshold (ms)")
plt1 + plt2 + plot_annotation(title = 'Model Fits for the ')
source("scripts/get_subgroup_comparisons.R")
subgroup_comp$eeg <- get_subgroup_comparisons2(my_samples$eeg)
nrow(subgroups)
my_samples$eeg
source("scripts/get_subgroup_comparisons.R")
subgroup_comp$eeg <- get_subgroup_comparisons2(my_samples$eeg)
comp_summary$eeg <- comparison_summary(subgroup_comp$eeg, TRUE, 'rms')
comparison_summary <- function(subgroup_comp_dat, greater, measurement_lab) {
# compute probabilties
subgroup_comp_dat %>%
group_by(key, index, normal) %>%
summarise(
mean_value = mean(value),
prob_one_tailed = if_else(greater == TRUE, mean(value > 0), mean(value < 0)))  %>%
mutate(
measurement = measurement_lab,
index_labs = as.numeric(as.factor(index)),
lab_cols = v_cols[index_labs],
prob_cat = cut(prob_one_tailed, c(0, 0.5, 0.75, 0.9, 0.99, 1))) -> comp_summary_dat
return(comp_summary_dat)
}
# compute probabilties
comp_summary$eeg <- comparison_summary(subgroup_comp$eeg, TRUE, 'rms')
subgroup_comp$eeg <- full_join(
subgroup_comp$eeg,
comp_summary$eeg,
by = c("key", "index", "normal"))
# compute probabilties
comp_summary$eeg <- comparison_summary(subgroup_comp$eeg, TRUE, 'rms')
subgroup_comp$eeg <- full_join(
subgroup_comp$eeg,
comp_summary$eeg,
by = c("key", "index", "normal"))
# Finally, plot everything:
p1 <- plot_comparisons(
filter(subgroup_comp$eeg, index == 2),
filter(comp_summary$eeg, index == 2),
1)
p2 <-plot_comparisons(
filter(subgroup_comp$eeg, index != 2),
filter(comp_summary$eeg, index != 2),
2)
both_plts <- cowplot::plot_grid(p1, p2, ncol = 2, align="hv")
source("scripts/get_subgroup_comparisons.R")
subgroup_comp$eeg <- get_subgroup_comparisons2(my_samples$eeg)
subgroup_comp$threshold <- get_subgroup_comparisons2(my_samples$threshold,)
subgroup_comp$occ_even <- get_subgroup_comparisons2(my_samples$occ_even)
subgroup_comp$par_odd  <- get_subgroup_comparisons2(my_samples$par_odd)
comparison_summary <- function(subgroup_comp_dat, greater, measurement_lab) {
# compute probabilties
subgroup_comp_dat %>%
group_by(key, index, normal) %>%
summarise(
mean_value = mean(value),
prob_one_tailed = if_else(greater == TRUE, mean(value > 0), mean(value < 0)))  %>%
mutate(
measurement = measurement_lab,
index_labs = as.numeric(as.factor(index)),
lab_cols = v_cols[index_labs],
prob_cat = cut(prob_one_tailed, c(0, 0.5, 0.75, 0.9, 0.99, 1))) -> comp_summary_dat
return(comp_summary_dat)
}
# compute probabilties
comp_summary$eeg <- comparison_summary(subgroup_comp$eeg, TRUE, 'rms')
subgroup_comp$eeg <- full_join(
subgroup_comp$eeg,
comp_summary$eeg,
by = c("key", "index", "normal"))
# Finally, plot everything:
p1 <- plot_comparisons(
filter(subgroup_comp$eeg, index == 2),
filter(comp_summary$eeg, index == 2),
1)
p2 <-plot_comparisons(
filter(subgroup_comp$eeg, index != 2),
filter(comp_summary$eeg, index != 2),
2)
both_plts <- cowplot::plot_grid(p1, p2, ncol = 2, align="hv")
summary(comp_summary$eeg )
subgroup_comp$eeg <- full_join(
subgroup_comp$eeg,
comp_summary$eeg,
by = c("key", "index", "normal"))
# Finally, plot everything:
p1 <- plot_comparisons(
filter(subgroup_comp$eeg, index == 2),
filter(comp_summary$eeg, index == 2),
1)
p2 <-plot_comparisons(
filter(subgroup_comp$eeg, index != 2),
filter(comp_summary$eeg, index != 2),
2)
both_plts <- cowplot::plot_grid(p1, p2, ncol = 2, align="hv")
# compute probabilties
comp_summary$eeg <- comparison_summary(subgroup_comp$eeg, TRUE, 'rms')
subgroup_comp$eeg <- full_join(
subgroup_comp$eeg,
comp_summary$eeg,
by = c("key", "index", "normal"))
# Finally, plot everything:
p1 <- plot_comparisons(
filter(subgroup_comp$eeg, index == 2),
filter(comp_summary$eeg, index == 2),
1)
p2 <-plot_comparisons(
filter(subgroup_comp$eeg, index != 2),
filter(comp_summary$eeg, index != 2),
2)
both_plts <- cowplot::plot_grid(p1, p2, ncol = 2, align="hv")
filter(subgroup_comp$eeg, index == 2)
d <- filter(subgroup_comp$eeg, index == 2)
f <-  filter(comp_summary$eeg, index == 2)
d$key <- fct_drop(d$key)
l$key <- fct_drop(l$key)
prob_relation <- mean(d$value)
if (is_thresholds) {
plt <- ggplot(d, aes(x = value, y = key, fill = prob_cat, colour = index))
} else {
plt <- ggplot(d, aes(x = value, y = key, fill = prob_cat, colour = index))
}
is_thresholds = FALSE
d$key <- fct_drop(d$key)
l$key <- fct_drop(l$key)
prob_relation <- mean(d$value)
if (is_thresholds) {
plt <- ggplot(d, aes(x = value, y = key, fill = prob_cat, colour = index))
} else {
plt <- ggplot(d, aes(x = value, y = key, fill = prob_cat, colour = index))
}
summary(d)
plt <- plt + geom_vline(xintercept = 0, linetype = 2) +
geom_line() +
geom_density_ridges(colour = "black", alpha = 0.75, bandwidth = 0.05) +
ggstance::geom_linerangeh(colour = "black", size = 0.5, aes(y = key, xmin= -5, xmax= 5)) +
scale_x_continuous('pdf for difference between subgroups', expand = c(0,0), breaks = seq(-2, 1, 0.5))
plt
plt <- plt + geom_vline(xintercept = 0, linetype = 2) +
geom_line() +
geom_density_ridges(colour = "black", alpha = 0.75, bandwidth = 0.05) +
ggstance::geom_linerangeh(colour = "black", size = 0.5, aes(y = key, xmin= -5, xmax= 5)) +
scale_x_continuous('pdf for difference between subgroups', expand = c(0,0), breaks = seq(-2, 1, 0.5)) +
scale_y_discrete(labels = function(x) TeX(levels(d$key))) + #labels = lapply(levels(subgroup_comp$key), TeX)
theme_minimal() +
ggthemes::scale_colour_ptol(drop = FALSE)
plt <- plt + geom_vline(xintercept = 0, linetype = 2) +
geom_line() +
geom_density_ridges(colour = "black", alpha = 0.75, bandwidth = 0.05) +
ggstance::geom_linerangeh(colour = "black", size = 0.5, aes(y = key, xmin= -5, xmax= 5)) +
scale_x_continuous('pdf for difference between subgroups', expand = c(0,0), breaks = seq(-2, 1, 0.5)) +
scale_y_discrete(labels = function(x) TeX(levels(d$key))) + #labels = lapply(levels(subgroup_comp$key), TeX)
theme_minimal()
plt
summary(d)
plt <- plt + geom_vline(xintercept = 0, linetype = 2) +
geom_line() +
geom_density_ridges(colour = "black", alpha = 0.75, bandwidth = 0.05) +
ggstance::geom_linerangeh(colour = "black", size = 0.5, aes(y = key, xmin= -5, xmax= 5)) +
scale_x_continuous('pdf for difference between subgroups', expand = c(0,0), breaks = seq(-2, 1, 0.5))
plt <- plt + geom_vline(xintercept = 0, linetype = 2) +
geom_line() +
geom_density_ridges(colour = "black", alpha = 0.75, bandwidth = 0.05) +
ggstance::geom_linerangeh(colour = "black", size = 0.5, aes(y = key, xmin= -5, xmax= 5)) +
scale_x_continuous('pdf for difference between subgroups', expand = c(0,0), breaks = seq(-2, 1, 0.5)) +
scale_y_discrete(labels = function(x) TeX(levels(d$key)))
plt
plt <- plt + geom_vline(xintercept = 0, linetype = 2) +
geom_line() +
geom_density_ridges(colour = "black", alpha = 0.75, bandwidth = 0.05) +
ggstance::geom_linerangeh(colour = "black", size = 0.5, aes(y = key, xmin= -5, xmax= 5)) +
scale_x_continuous('pdf for difference between subgroups', expand = c(0,0), breaks = seq(-2, 1, 0.5))
plt
plt <- plt + geom_vline(xintercept = 0, linetype = 2) +
geom_line() +
geom_density_ridges(colour = "black", alpha = 0.75, bandwidth = 0.05) +
ggstance::geom_linerangeh(colour = "black", size = 0.5, aes(y = key, xmin= -5, xmax= 5)) +
scale_x_continuous('pdf for difference between subgroups', expand = c(0,0), breaks = seq(-2, 1, 0.5))
plt
